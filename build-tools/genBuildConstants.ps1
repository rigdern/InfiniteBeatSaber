# Generates `BuildConstantsRelease.cs` so the mod has access to useful
# information from the build such as the git commit that was built and the
# build date.
#

$ErrorActionPreference = 'Stop'

$repoRoot = Join-Path $PSScriptRoot '..'
    $generatedDir = Join-Path $repoRoot 'Generated'
        $buildConstantsPath = Join-Path (Join-Path $generatedDir 'BuildConstants') 'Release.cs'

function Write-FatalError {
    param (
        [Parameter(Mandatory=$true)]
        [string]$Message
    )

    $callerLineNumber = $MyInvocation.ScriptLineNumber
    
    # Logging the error in this format enables Visual Studio to show it in its
    # "Error List" pane. Double-clicking on the error should open this PowerShell
    # script.
    [System.Console]::Error.WriteLine("..\build-tools\genBuildConstants.ps1($callerLineNumber): error 2: $Message")
    exit 1
}

function Test-Predicate {
    param (
        [Parameter(Mandatory = $true)]
        $Condition,
        
        [Parameter(Mandatory = $true)]
        $Message
    )

    if (-not $Condition) {
        Write-FatalError "Assertion failed: $Message"
    }
}

function Ensure-Directory {
    param (
        [Parameter(Mandatory=$true)]
        [string]$dirPath
    )
    
    if (-not (Test-Path $dirPath)) {
        New-Item -Path $dirPath -Type Directory | Out-Null
    }
}

function Get-Git {
    param (
        [Parameter(ValueFromRemainingArguments = $true)]
        [String[]]$Arguments
    )

    $result = & git $Arguments 2>&1
    Test-Predicate ($LASTEXITCODE -eq 0) "Command failed with message: $result"
    if ($result -eq $null) {
        return ''
    } else {
        return $result.ToString().Trim()
    }
}

function Test-GitHasLocalChanges {
    return (Get-Git 'status' '--porcelain').Length -gt 0
}

function Get-GitHeadSymbol {
    return Get-Git 'rev-parse' '--symbolic-full-name' 'HEAD'
}

function Get-GitHeadSha {
    return Get-Git 'rev-parse' 'HEAD'
}

function Render-BuildConstants {
    param (
        [string]$GitFullHash,
        [string]$GitShortHash,
        [int]$NowPosix
    )

    return @"
// <auto-generated>
//   This file was generated by 'build-tools\genBuildConstants.ps1' and should
//   not be edited.
// </auto-generated>

using System;

namespace InfiniteBeatSaber
{
    internal static class BuildConstants
    {
        private static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);

        public const string GitFullHash = "$GitFullHash";
        public const string GitShortHash = "$GitShortHash";
        public static readonly DateTime BuildDate = UnixEpoch.AddSeconds($NowPosix);
    }
}
"@
}

function Main {
    if (Test-GitHasLocalChanges) { Write-FatalError 'Git repo has local changes.' }
    if ((Get-GitHeadSymbol) -ne 'refs/heads/main') { Write-FatalError "Git repo isn't on the main branch." }

    $gitFullHash = Get-GitHeadSha
    $gitShortHash = $gitFullHash.Substring(0, 12)
    $nowPosix = [DateTimeOffset]::UtcNow.ToUnixTimeSeconds()

    $buildConstantsContent = Render-BuildConstants -GitFullHash $gitFullHash -GitShortHash $gitShortHash -NowPosix $nowPosix
    Ensure-Directory (Split-Path $buildConstantsPath -Parent)
    Set-Content -Path $buildConstantsPath -Value $buildConstantsContent -Encoding UTF8
}

Main
